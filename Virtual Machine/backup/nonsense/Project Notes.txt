# Stack-based arithmetic is a simple matter: the operands are popped from the
# stack, the required operation is performed on them, and the result is pushed
# back onto the stack.

# Within a .vm file, each VM command appears in a separate line, and in one of
# the following formats: /command/ (e.g. `add`), /command <arg>/ (e.g., `goto
# loop`), or /command <arg1><arg2>/ (e.g., `push local 3`).
# The arguments are separated from each other and from the /command/ part by
# an arbitrary number of spaces. `//` can appear at the end of any line and are
# ignored. Blank lines are permitted and ignored.

# The VM language features nine stack-oriented arithmetic and logical commands.
# Seven of these commands are binary: They pop two items off the stack, compute
# a binary function on them, and push the result back onto the stack.
# The remaining two commands are unary: they pop a single item off the stack,
# compute a unary function on t, and push the result back onto the stack.
# We see that each command has the net impact of replacing its operand(s) with
# the command's result, without affecting the rest of the stack.
#
# Three of the comands below return Boolean values. The VM represents /true/
# and /false/ as -1 (minut one, 0xFFFF) and 0 (zero, 0x0000), respectively
#
#MEMORY ACCESS COMMANDS:
#           |  Return value (after      |
# Command   |  popping the operands/s)  | Comment
#-----------+---------------------------+-------------------------------------
# add       | x + y                     | Integer addition (2's complement)
# sub       | x - y                     | Integer subtraction (2's complement)
# neg       |-y                         | Arithmetic negation (2's complement)
# eq        | true if x = y, else false | Equality
# gt        | true if x > y, else false | Greater than
# lt        | true if x < y, else false | Less than
# and       | x And y                   | Bit-wise
# or        | x Or y                    | Bit-wise
# not       | Not y                     | Bit-wise
#


#MEMORY ACCESS COMMANDS:
#  push <segment><index> -- Push the value of segment[index] onto the
#                           stack
#  pop <segment><index>  -- Pop the top stack value and store it in
#                           segment[index]
#
# Segment   |   Purpose                 |   Comments
#-----------+---------------------------+-------------------------------------
# argument  | Stores the funtion's      | Allocated dynamically by the VM
#           | arguments                 | implementation when the function
#           |                           | is entered.
#           |                           |
# local     | Stores the function's     | Allocated dynamically by the VM
#           | local variables           | implementation and initialized to 0's
#           |                           | when the function is entered.
#           |                           |
# static    | Stores static variables   | Allocated by the VM implementation
#           | shared by all functions   | for each .vm file; shared by all
#           | in the same .vm file.     | functions in the .vm file.
#           |                           |
# constant  | Pseudo-segment that holds | Emulated by the VM implementation.
#           | all the constants in the  | Seen by all the functions in the 
#           | range 0...32767.          | program.
#           |                           |
# this      | General-purpose segments  | Any VM function can use these
# that      | Can be made to correspond | segments to manipulate selected areas
#           | to different areas in the | on the heap.
#           | heap. Serve various       |
#           | programming needs.        |
#           |                           |
# pointer   | A two-entry segment that  | Any VM function can set `pointer` 0
#           | holds the base addresses  | (or 1) to some address; this has the
#           | of the `this` and `that`  | effect of aligning the `this` (or
#           | segments.                 | `that`) segment to the heap area 
#           |                           | beginning in that address.
#           |                           |
# temp      | Fixed eight-entry segment |
#           | that holds temporary      |
#           | variables for general use.|



#RAM USAGE:
#RAM addresses  |   Usage
#---------------+-------------------------------------------------------
#         0-15  |   Sixteen virtual register, (desc. below)
#       16-255  |   Static variables (of all the VM functions in the VM
#               |    program
#     256-2047  |   Stack
#   2048-16383  |   Heap (used to store objects and arrays)
#  16384-24575  |   Memory mapped I/O
#
#VIRTUAL REGISTERS:
#Register   | Name  |   Usage
#-----------+-------+---------------------------------------------------
# RAM[0]    | SP    |   Stack pointer: points to the next topmost
#           |       |    location in the stack;
# RAM[1]    | LCL   |   Points to the base of the current VM function's
#           |       |    `local` segment;
# RAM[2]    | ARG   |   Points to the base of the current VM function's
#           |       |    `argument` segment;
# RAM[3]    | THIS  |   Points to the base of the current `this` segment
#           |       |    (within the heap);
# RAM[4]    | THAT  |   Points to the base of the current `that` segment
#           |       |    (within the heap);
# RAM[5-12] |       |   Hold the contens of the `temp` segment;
# RAM[13-15]|       |   Can be used by the VM implementation as general-
#           |       |    purpose registers


